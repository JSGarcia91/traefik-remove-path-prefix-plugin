package traefik_remove_path_prefix_plugin

import (
	"context"
	"net/http"
	"net/http/httptest"
	"testing"
)

// TestServeHTTP defines the test cases that the plugin must pass to be correct.
func TestServeHTTP(t *testing.T) {
	testPath(t, "http://localhost", "/", true)
	testPath(t, "http://localhost", "", false)

	testPath(t, "http://localhost/", "/", true)
	testPath(t, "http://localhost/", "", false)

	testPath(t, "http://localhost/foo", "/", true)
	testPath(t, "http://localhost/foo", "", false)

	testPath(t, "http://localhost/foo/bar", "/bar/", true)
	testPath(t, "http://localhost/foo/bar", "/bar", false)

	testPath(t, "http://localhost/foo/bar/xyz?foo=foo", "/bar/xyz/", true)
	testPath(t, "http://localhost/foo/bar/xyz?foo=foo", "/bar/xyz", false)
}

// testPath initialize the context and check that the path generated by the plugin is equal to the expected.
func testPath(t *testing.T, rawPath string, expectedPath string, forceSlash bool) {
	cfg := &Config{
		ForceSlash: forceSlash,
	}

	ctx := context.Background()
	next := http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {})

	handler, err := New(ctx, next, cfg, "removepathprefix")
	if err != nil {
		t.Fatal(err)
	}

	recorder := httptest.NewRecorder()

	req, err := http.NewRequestWithContext(ctx, http.MethodGet, rawPath, nil)
	if err != nil {
		t.Fatal(err)
	}

	handler.ServeHTTP(recorder, req)

	assertPath(t, req, expectedPath)
}

// assertPath check that request path is equal to the expected.
func assertPath(t *testing.T, req *http.Request, expected string) {
	t.Helper()

	if req.URL.Path != expected {
		t.Errorf("invalid path value: \"%s\" expected \"%s\"", req.URL.Path, expected)
	}
}
